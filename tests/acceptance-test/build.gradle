plugins {
    id "java-library"
}

dependencies {
    testImplementation project(":tessera-core")
    testImplementation project(":tessera-context")
    testImplementation project(":security")
    testImplementation project(":tessera-partyinfo")
    testImplementation project(path: ":tessera-dist")

    testImplementation project(":enclave:enclave-jaxrs")
    testImplementation project(":config-migration")

    testImplementation project(":enclave:enclave-api")
    testImplementation project(":encryption:encryption-api")
    testImplementation project(":tessera-jaxrs:common-jaxrs")
    testImplementation project(":tessera-jaxrs:jaxrs-client")
    testImplementation project(":shared")
    testImplementation project(":config")
    testImplementation project(":tests:test-util")

    testImplementation project(":ddls")

    testImplementation "org.slf4j:slf4j-api"
    testRuntimeOnly "ch.qos.logback:logback-classic"
    testRuntimeOnly "ch.qos.logback:logback-core"
    testRuntimeOnly "org.slf4j:jcl-over-slf4j"
    testRuntimeOnly "org.slf4j:jul-to-slf4j"

    testImplementation "io.cucumber:cucumber-junit:4.0.1"
    testImplementation "io.cucumber:cucumber-java8:4.0.1"

    testImplementation "org.xerial:sqlite-jdbc"
    testImplementation "org.hsqldb:hsqldb"
    testImplementation 'com.github.tomakehurst:wiremock:2.27.1'
    testImplementation "jakarta.ws.rs:jakarta.ws.rs-api"
    testImplementation "org.assertj:assertj-core"
    testImplementation "com.github.jnr:jnr-unixsocket"
    testRuntime "org.eclipse.persistence:org.eclipse.persistence.moxy"
}

sourceSets {
        test {
            java {
                srcDir "src/test/java"
            }
            resources {
                srcDir "src/test/resources"
            }
        }
}



test {

    systemProperty "application.jar","${buildDir}/unpacked/dist/tessera-"+ project.version +"/bin/tessera"

    systemProperty "enclave.jaxrs.server.jar","${buildDir}/unpacked/dist/enclave-jaxrs-"+ project.version +"/bin/enclave-jaxrs"
    systemProperty "jdbc.hsql.jar",project.configurations.testCompileClasspath.find { it.name.startsWith("hsqldb") }
    systemProperty "jdbc.sqlite.jar",project.configurations.testCompileClasspath.find { it.name.startsWith("sqlite-jdbc") }
    systemProperty "jdbc.dir","${buildDir}/ext"

    include(
            "**/RestSuiteHttpH2RemoteEnclave.class",
////            "**/RestSuiteHttpHSQL.class",
            "**/RestSuiteUnixH2.class",
////            "**/RestSuiteHttpSqllite.class",
            "**/RestSuiteHttpH2.class",
            "**/SendWithRemoteEnclaveReconnectIT.class",
////            "**/RestSuiteHttpqlite.class",
            "**/CucumberWhitelistIT.class",
//            "**/ConfigMigrationIT.class",
            "**/P2pTestSuite.class",
            "**/CucumberFileKeyGenerationIT.class",
            "**/P2pTestSuite.class",
            "**/RunAwsIT.class",
            "**/RunAzureIT.class"
    )

    if (project.hasProperty("excludeTests")) {
        exclude project.property("excludeTests")
    }

}

task unzipTessera(type: Copy) {
    def zipFile = file(project(":tessera-dist").distZip.outputs.files.getFiles()[0])
    def outputDir = file("${buildDir}/unpacked/dist")
    from zipTree(zipFile)
    into outputDir

}

task unzipEnclave(type: Copy) {
    def zipFile = file(project(":enclave:enclave-jaxrs").distZip.outputs.files.getFiles()[0])
    def outputDir = file("${buildDir}/unpacked/dist")
    from zipTree(zipFile)
    into outputDir
}


task unzipDdl(type:Copy) {
    def zipFile = file(project(":ddls").jar.outputs.files.getFiles()[0])
    def outputDir = file("${buildDir}/resources/test/ddls")
    from zipTree(zipFile)
    into outputDir
}

task copyJdbcJars(type:Copy) {

    def hsqldbJar = project.configurations.testCompileClasspath.find { it.name.startsWith("hsqldb")}
    def sqliteJar = project.configurations.testCompileClasspath.find { it.name.startsWith("sqlite")}

    def outputDir = file("${buildDir}/ext")
    from hsqldbJar
    into outputDir

    from sqliteJar
    into outputDir
}


task list(dependsOn: configurations.compileClasspath) {
    doLast {
        println "classpath = ${configurations.testCompileClasspath.collect { File file -> file.name }}"
    }
}


test.dependsOn clean,copyJdbcJars,unzipDdl,unzipTessera,unzipEnclave

