plugins {
    id "org.owasp.dependencycheck" version "5.3.2.1"
    id "jacoco"
    id "com.diffplug.gradle.spotless" version "3.25.0"
    id "com.github.ben-manes.versions" version "0.8"
    id "checkstyle"
}



def jettyVersion = "9.4.25.v20191220"

def eclipselinkVersion = "2.7.7"
def jerseyVersion = "2.27"
def slf4jVersion = "1.7.30"
def logbackVersion = "1.2.3"

allprojects {
    group = "com.jpmorgan.quorum"
    plugins.withType(JavaPlugin).configureEach {
        java {
            modularity.inferModulePath = true
        }
    }
    plugins.withType(JavaPlugin).whenPluginAdded {

        dependencies {
            constraints {
                implementation "org.slf4j:slf4j-api:"+ slf4jVersion
                runtimeOnly "org.slf4j:jcl-over-slf4j:"+ slf4jVersion
                runtimeOnly "org.slf4j:jul-to-slf4j:"+ slf4jVersion
                runtimeOnly "ch.qos.logback:logback-classic:"+ logbackVersion
                runtimeOnly "ch.qos.logback:logback-core:"+ logbackVersion

                implementation "org.slf4j:jul-to-slf4j:"+ slf4jVersion //required by jersey server
                testImplementation "org.slf4j:jul-to-slf4j:"+ slf4jVersion //required by enclave jaxrs module

                implementation "org.eclipse.persistence:org.eclipse.persistence.moxy:"+ eclipselinkVersion
                implementation "org.eclipse.persistence:org.eclipse.persistence.jpa:"+ eclipselinkVersion
                implementation "org.eclipse.persistence:org.eclipse.persistence.extension:"+ eclipselinkVersion

                testImplementation "junit:junit:4.13"
                testImplementation "org.assertj:assertj-core:3.9.1"
                testImplementation "org.mockito:mockito-core:3.4.4"

                implementation "org.mockito:mockito-core:2.28.2" //required by mock jaxrs module

                testImplementation "com.openpojo:openpojo:0.8.10"
                testImplementation "com.github.stefanbirkner:system-rules:1.19.0"
                testImplementation "nl.jqno.equalsverifier:equalsverifier:3.1.5"
                testImplementation "com.mockrunner:mockrunner-jdbc:2.0.4"

                implementation "commons-cli:commons-cli:1.4"
                implementation "commons-codec:commons-codec:1.14"
                implementation "commons-io:commons-io:2.6"
                implementation "org.apache.commons:commons-lang3:3.7"

                implementation "com.github.jnr:jnr-unixsocket:0.28"
                implementation "de.mkammerer:argon2-jvm:2.5"

                implementation "info.picocli:picocli:4.0.4"
                implementation "org.jasypt:jasypt:1.9.3"
                implementation "com.moandjiezana.toml:toml4j:0.7.2"

                implementation "org.glassfish.jersey.inject:jersey-hk2:"+ jerseyVersion
                implementation "org.glassfish.jersey.media:jersey-media-json-processing:"+ jerseyVersion
                implementation "org.glassfish.jersey.media:jersey-media-moxy:"+ jerseyVersion
                implementation "org.glassfish.jersey.test-framework:jersey-test-framework-core:"+ jerseyVersion
                implementation "org.glassfish.jersey.test-framework.providers:jersey-test-framework-provider-grizzly2:"+ jerseyVersion
                implementation "org.glassfish.jersey.core:jersey-server:"+ jerseyVersion
                implementation "org.glassfish.jersey.ext:jersey-bean-validation:"+ jerseyVersion
                implementation "org.glassfish.jersey.containers:jersey-container-servlet-core:"+ jerseyVersion
                implementation "org.glassfish.jersey.inject:jersey-hk2:"+ jerseyVersion
                implementation "org.glassfish.jersey.core:jersey-common:"+ jerseyVersion
                implementation "org.glassfish.jersey.core:jersey-client:"+ jerseyVersion

                implementation "org.eclipse.jetty:jetty-unixsocket:"+ jettyVersion
                implementation "org.eclipse.jetty:jetty-client:"+ jettyVersion
                implementation "org.eclipse.jetty:jetty-servlet:"+ jettyVersion
                implementation "org.eclipse.jetty:jetty-unixsocket:"+ jettyVersion
                implementation "org.eclipse.jetty:jetty-server:"+ jettyVersion

                implementation "org.cryptacular:cryptacular:1.2.4"
                implementation "eu.neilalexander:jnacl:1.0.0"

                implementation "io.swagger:swagger-annotations:1.5.4"
                implementation "org.bouncycastle:bcpkix-jdk15on:1.64"
                implementation "org.bouncycastle:bcprov-jdk15on:1.64"

                implementation "com.h2database:h2:1.4.200"
                implementation "com.zaxxer:HikariCP:3.2.0"
                implementation "org.hsqldb:hsqldb:2.4.1"
                implementation "org.xerial:sqlite-jdbc:3.23.1"


                implementation "jakarta.ws.rs:jakarta.ws.rs-api:2.1.6"
                implementation "jakarta.persistence:jakarta.persistence-api:2.2.3"
                implementation "jakarta.inject:jakarta.inject-api:1.0.1"
                implementation "jakarta.xml.bind:jakarta.xml.bind-api:2.3.3"

                implementation "jakarta.activation:jakarta.activation-api:1.2.0"
                implementation "com.sun.activation:jakarta.activation-api:1.2.1"

                implementation "jakarta.annotation:jakarta.annotation-api:1.3.5"
                implementation "jakarta.transaction:jakarta.transaction-api:1.3.3"
                implementation "jakarta.servlet:jakarta.servlet-api:4.0.4"
                implementation "com.sun.mail:jakarta.mail:1.6.5"

                implementation "org.glassfish.jaxb:jaxb-runtime:2.3.3"
                implementation "org.glassfish:jsonp-jaxrs:1.1.6"
                implementation "org.glassfish:jakarta.json:1.1.6"

                implementation "jakarta.el:jakarta.el-api:3.0.3"
                implementation "org.glassfish:jakarta.el:3.0.3"

                implementation "jakarta.validation:jakarta.validation-api:2.0.2"
                implementation "org.hibernate:hibernate-validator:6.1.5.Final"

                implementation 'com.github.tomakehurst:wiremock:2.27.1'
            }
        }
    }


}

subprojects {

    apply plugin: "java"
    apply plugin: "com.diffplug.gradle.spotless"
    apply plugin: "maven-publish"
    apply plugin: "jacoco"
    apply plugin: "checkstyle"
    apply plugin: "org.owasp.dependencycheck"

    repositories {
        mavenLocal()
        maven {
            url = "https://repo.maven.apache.org/maven2"
        }
    }

    task allDeps(type: DependencyReportTask) {}

    configurations.all {
        resolutionStrategy.eachDependency {details ->
            if(details.requested.group == "javax.servlet" && details.requested.name == "javax.servlet-api") {
                details.useTarget("jakarta.servlet:jakarta.servlet-api:4.0.4")
            }
            if(details.requested.group == "javax.validation") {
                details.useTarget("jakarta.validation:jakarta.validation-api:2.0.2")
            }

            if(details.requested.group == "javax.ws.rs") {
                details.useTarget("jakarta.ws.rs:jakarta.ws.rs-api:2.1.6")
            }
            if(details.requested.group == "javax.activation") {
                details.useTarget("jakarta.activation:jakarta.activation-api:1.2.0")
            }
            if(details.requested.group == "javax.annotation") {
                details.useTarget("jakarta.annotation:jakarta.annotation-api:1.3.5")
            }

            if(details.requested.name.startsWith("javax.el")) {

                if(details.requested.group == "javax.el") {
                    //details.useTarget("jakarta.el:jakarta.el-api:3.0.3")
                    details.useTarget("org.glassfish:jakarta.el:3.0.3")
                }
                if(details.requested.group.startsWith("org.glassfish")) {
                    details.useTarget("org.glassfish:jakarta.el:3.0.3")
                }

            }

            if(details.requested.name == "javax.inject") {
                details.useTarget("jakarta.inject:jakarta.inject-api:1.0.1")
            }

            if(details.requested.name == "javax.json") {
                if(details.requested.group == "org.glassfish") {
                    details.useTarget("org.glassfish:jakarta.json:1.1.6")
                }
                if(details.requested.group == "javax.json") {
                    //details.useTarget("jakarta.json:jakarta.json-api:1.1.6")
                    details.useTarget("org.glassfish:jakarta.json:1.1.6")
                }
            }

        }
    }


    dependencies {

        implementation "org.slf4j:slf4j-api"
        runtimeOnly "ch.qos.logback:logback-classic"
        runtimeOnly "ch.qos.logback:logback-core"
        implementation "jakarta.xml.bind:jakarta.xml.bind-api" //only for annoying javadoc noise

        testImplementation "junit:junit"
        testImplementation "org.assertj:assertj-core"
        testImplementation "org.mockito:mockito-core"
        testImplementation "com.openpojo:openpojo"
        testImplementation "com.github.stefanbirkner:system-rules"
        testImplementation "nl.jqno.equalsverifier:equalsverifier"
    }

    test {
        systemProperty("javax.xml.bind.JAXBContextFactory", "org.eclipse.persistence.jaxb.JAXBContextFactory")
        systemProperty("javax.xml.bind.context.factory", "org.eclipse.persistence.jaxb.JAXBContextFactory")
    }
    
    checkstyle {
        configFile project.getRootProject().file("checkstyle.xml")
        configProperties.put("checkstyle.suppressions.file",project.getRootProject().file("checkstyle-suppressions.xml"))
        dependencies{
            checkstyle "com.puppycrawl.tools:checkstyle:8.34"
            checkstyle "com.github.sevntu-checkstyle:sevntu-checks:1.37.1"
        }
    }

    dependencyCheck {
        failBuildOnCVSS = 0
        suppressionFile = project.getRootProject().file("cvss-suppressions.xml")
      //  analyzedTypes = ["zip"]
    }
    
    jacoco {
        toolVersion = "0.8.5"
    }

    spotless {

        lineEndings = "unix"

        java {
            target fileTree("**/*.java")
            // indentWithSpaces(4)
            removeUnusedImports()
            // googleJavaFormat().aosp()
        }
        groovyGradle {
            target "*.gradle"
            indentWithSpaces(4)
            paddedCell()
        }
    }
    jacocoTestReport {
        reports {
            xml.enabled false
            csv.enabled false
            html.enabled true
        }
    }
    jacocoTestCoverageVerification {
        violationRules {
            rule {
                element = "CLASS"
                limit {
                    counter = "LINE"
                    value = "COVEREDRATIO"
                    minimum = 1.0
                }
                limit {
                    counter = "INSTRUCTION"
                    value = "COVEREDRATIO"
                    minimum = 1.0
                }

                excludes = [
                        "com.quorum.tessera.config.migration.Main",
                        "com.quorum.tessera.data.migration.Main",
                        "com.quorum.tessera.passwords.ConsolePasswordReader",
                        "com.quorum.tessera.passwords.PasswordReaderFactory",
                        "com.quorum.tessera.enclave.rest.Main",
                        "com.quorum.tessera.key.vault.azure.AzureSecretClientDelegate",
                        "com.quorum.tessera.key.vault.hashicorp.KeyValueOperationsDelegateFactory"
                ]
            }

        }
    }



    sourceSets {
        main {
            java {
                srcDir "src/main/java"
            }
            resources {
                srcDir "src/main/resources"
            }
        }
        test {
            java {
                srcDir "src/test/java"
            }
            resources {
                srcDir "src/test/resources"
            }
        }
    }

    sourceCompatibility = "11"


    java {
        withJavadocJar()
        withSourcesJar()
    }

    javadoc {
        failOnError false
        if(JavaVersion.current().isJava9Compatible()) {
            options.addBooleanOption("html5", true)
        }
    }

    publishing {

        publications {

            mavenJava(MavenPublication) {

                from components.java
                afterEvaluate {
                   // artifactId = jar.archiveBaseName
                }

                pom {
                    groupId = "com.jpmorgan.quorum"
//                    description = "A concise description of my library"
                    url = "https://github.com/jpmorganchase/tessera"
                    licenses {
                        license {
                            name = "The Apache License, Version 2.0"
                            url = "LICENSE"
                        }
                    }
                    developers {
                        developer {
                            id = "melowe"
                            name = "Mark Lowe"
                            email = "melowe.quorum@gmail.com"
                        }
                        developer {
                            id = "prd-fox"
                            name = "Peter Fox"
                            email = "peter.rd.fox@gmail.com"
                        }
                        developer {
                            id = "namtruong"
                            name = "Nam Truong"
                            email = "nam.p.truong@gmail.com"
                        }
                        developer {
                            id = "SatpalSandhu61"
                            name = "Satpal Sandhu"
                            email = "quorum@satpal.co.uk"
                        }
                        developer {
                            id = "chrishounsom"
                            name = "Chris Hounsom"
                            email = "chrishounsom@icloud.com"
                        }
                        developer {
                            id = "nicolae-leonte-go"
                            name = "Nicolae Leonte"
                            email = "nicolae.leonte.go@gmail.com"
                        }

                    }

                    scm {
                        connection = "scm:git:https://github.com/jpmorganchase/tessera.git"
                        developerConnection = "scm:git:https://github.com/jpmorganchase/tessera.git"
                        url = "https://github.com/jpmorganchase/tessera"
                        tag = "HEAD"
                    }

                    repositories {
                        maven {

                            //https://oss.sonatype.org/service/local/staging/deploy/maven2
                            // change URLs to point to your repos, e.g. http://my.org/repo
                            def releasesRepoUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2"//"$buildDir/repos/releases"
                            def snapshotsRepoUrl = "https://oss.sonatype.org/content/repositories/snapshots" //"$buildDir/repos/snapshots"
                            url = version.endsWith("SNAPSHOT") ? snapshotsRepoUrl : releasesRepoUrl


                            credentials {
                                if(project.hasProperty("ossrhUsername") && project.hasProperty("ossrhPassword")) {
                                    username = property("ossrhUsername")
                                    password = property("ossrhPassword")
                                }
                            }

                        }
                    }
                }
            }
        }
    }


    apply plugin: "signing"

    signing {
        useGpgCmd()
        sign publishing.publications.mavenJava
    }

    tasks.withType(JavaCompile) {
        options.encoding = "UTF-8"
    }

    tasks.withType(GenerateModuleMetadata) {
        enabled = false
    }

    test {
        exclude "**/*IT.class"
    }

    jacocoTestCoverageVerification.dependsOn jacocoTestReport
    check.dependsOn checkstyleMain, checkstyleTest, spotlessCheck, jacocoTestCoverageVerification

}






